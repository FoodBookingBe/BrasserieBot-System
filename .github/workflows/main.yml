name: BrasserieBot CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  GCP_PROJECT: brasseriebot
  GCP_REGION: europe-west1

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json
      - name: Install dependencies
        working-directory: ${{ matrix.app }}
        run: npm ci
      - name: Lint
        working-directory: ${{ matrix.app }}
        run: npm run lint

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [backend, frontend]
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json
      - name: Install dependencies
        working-directory: ${{ matrix.app }}
        run: npm ci
      - name: Generate Prisma Client (Backend only)
        if: matrix.app == 'backend'
        working-directory: backend
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
      - name: Run tests
        working-directory: ${{ matrix.app }}
        run: npm test
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          JWT_SECRET: test-secret

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json
      - name: Install dependencies
        working-directory: ${{ matrix.app }}
        run: npm ci
      - name: Build
        working-directory: ${{ matrix.app }}
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: |
            ${{ matrix.app }}/dist
            ${{ matrix.app }}/.next
          retention-days: 7

  deploy:
    name: Deploy to GCP
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and Push Docker Images
        run: |
          # Backend
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT }}/brasseriebot/backend:${{ github.sha }} ./backend
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT }}/brasseriebot/backend:${{ github.sha }}
          
          # Frontend
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT }}/brasseriebot/frontend:${{ github.sha }} ./frontend
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT }}/brasseriebot/frontend:${{ github.sha }}
      
      - name: Deploy to GKE
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: brasseriebot
          region: ${{ env.GCP_REGION }}
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT }}/brasseriebot/backend:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}