# BrasserieBot GCP Infrastructure - GitHub Actions Workflow

name: BrasserieBot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: brasserie-bot-cluster-prod
  GKE_ZONE: europe-west1
  BACKEND_IMAGE: brasserie-bot-backend
  FRONTEND_IMAGE: brasserie-bot-frontend
  AUTODEV_IMAGE: brasserie-bot-autodev
  AUTODEV_DASHBOARD_IMAGE: brasserie-bot-autodev-dashboard

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set-version
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript

      - name: Run dependency scan
        uses: snyk/actions/node@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  autodev-review:
    name: AutoDev Code Review
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd BrasserieBot/autodev
          npm ci

      - name: Run AutoDev code review
        run: |
          cd BrasserieBot/autodev
          npm run review
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd BrasserieBot/backend
          npm ci

      - name: Run backend tests
        run: |
          cd BrasserieBot/backend
          npm test

      - name: Install frontend dependencies
        run: |
          cd BrasserieBot/frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd BrasserieBot/frontend
          npm test

      - name: Install AutoDev dependencies
        run: |
          cd BrasserieBot/autodev
          npm ci

      - name: Run AutoDev tests
        run: |
          cd BrasserieBot/autodev
          npm test

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [setup, security-scan, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push backend image
        run: |
          cd BrasserieBot/backend
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:${{ needs.setup.outputs.version }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:${{ needs.setup.outputs.version }}
          docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:${{ needs.setup.outputs.version }} gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:latest
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:latest

      - name: Build and push frontend image
        run: |
          cd BrasserieBot/frontend
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:${{ needs.setup.outputs.version }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:${{ needs.setup.outputs.version }}
          docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:${{ needs.setup.outputs.version }} gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:latest
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:latest

      - name: Build and push AutoDev image
        run: |
          cd BrasserieBot/autodev
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:${{ needs.setup.outputs.version }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:${{ needs.setup.outputs.version }}
          docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:${{ needs.setup.outputs.version }} gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:latest
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:latest

      - name: Build and push AutoDev Dashboard image
        run: |
          cd BrasserieBot/autodev
          docker build -f Dockerfile.dashboard -t gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:${{ needs.setup.outputs.version }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:${{ needs.setup.outputs.version }}
          docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:${{ needs.setup.outputs.version }} gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:latest
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:latest

  migrate-database:
    name: Migrate Database
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Prisma
        run: npm install -g prisma

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set up Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy_x64.linux -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=${{ secrets.CLOUDSQL_INSTANCE }}=tcp:5432 &

      - name: Run database migrations
        run: |
          cd BrasserieBot/database
          DATABASE_URL=${{ secrets.DATABASE_URL }} prisma migrate deploy

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: [setup, build, migrate-database]
    environment:
      name: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update Kubernetes manifests
        run: |
          cd BrasserieBot/infrastructure/kubernetes
          # Replace PROJECT_ID placeholder with actual project ID
          find . -type f -name "*.yaml" -exec sed -i "s/PROJECT_ID/${{ env.PROJECT_ID }}/g" {} \;
          # Update image tags
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:latest|gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_IMAGE }}:${{ needs.setup.outputs.version }}|g" deployments/backend-deployment.yaml
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:latest|gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}:${{ needs.setup.outputs.version }}|g" deployments/frontend-deployment.yaml
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:latest|gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_IMAGE }}:${{ needs.setup.outputs.version }}|g" deployments/autodev-deployment.yaml
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:latest|gcr.io/${{ env.PROJECT_ID }}/${{ env.AUTODEV_DASHBOARD_IMAGE }}:${{ needs.setup.outputs.version }}|g" deployments/autodev-dashboard-deployment.yaml

      - name: Deploy to GKE
        run: |
          # Apply namespaces first
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/namespaces/namespaces.yaml
          
          # Apply service accounts and config
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/config/service-accounts.yaml
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/config/config-maps.yaml
          
          # Apply secrets (in production, these would be managed by Secret Manager)
          # kubectl apply -f BrasserieBot/infrastructure/kubernetes/config/secrets.yaml
          
          # Apply deployments
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/backend-deployment.yaml
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/frontend-deployment.yaml
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/autodev-deployment.yaml
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/autodev-dashboard-deployment.yaml
          
          # Apply ingress
          kubectl apply -f BrasserieBot/infrastructure/kubernetes/ingress/ingress.yaml
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/brasserie-bot-backend -n brasserie-bot
          kubectl rollout status deployment/brasserie-bot-frontend -n brasserie-bot
          kubectl rollout status deployment/brasserie-bot-autodev -n brasserie-bot-autodev
          kubectl rollout status deployment/brasserie-bot-autodev-dashboard -n brasserie-bot-autodev

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Deployment to ${{ needs.setup.outputs.environment }} successful! Version: ${{ needs.setup.outputs.version }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: ${{ needs.deploy.result != 'success' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ Deployment to ${{ needs.setup.outputs.environment }} failed! Version: ${{ needs.setup.outputs.version }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update AutoDev system
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          curl -X POST https://api.brasserie-bot.com/autodev/deployment-notification \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.AUTODEV_API_KEY }}" \
            -d '{
              "version": "${{ needs.setup.outputs.version }}",
              "environment": "${{ needs.setup.outputs.environment }}",
              "status": "success",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }'