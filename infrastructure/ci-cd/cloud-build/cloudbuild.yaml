# BrasserieBot GCP Infrastructure - Cloud Build Configuration

timeout: 3600s

substitutions:
  _GKE_CLUSTER: brasserie-bot-cluster-prod
  _GKE_ZONE: europe-west1
  _BACKEND_IMAGE: brasserie-bot-backend
  _FRONTEND_IMAGE: brasserie-bot-frontend
  _AUTODEV_IMAGE: brasserie-bot-autodev
  _AUTODEV_DASHBOARD_IMAGE: brasserie-bot-autodev-dashboard
  _ENVIRONMENT: production

options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  dynamic_substitutions: true
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_GKE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}'

steps:
  # Clone the repository
  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone repository'
    args: ['clone', 'https://github.com/your-org/brasserie-bot.git']

  # Set version
  - name: 'gcr.io/cloud-builders/git'
    id: 'Set version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "VERSION=$$(git rev-parse --short HEAD)" >> build.env
        cat build.env
    env:
      - 'CLOUDBUILD_LOGS_BUCKET=${_CLOUDBUILD_LOGS_BUCKET}'

  # Security scan
  - name: 'gcr.io/$PROJECT_ID/security-scanner'
    id: 'Run security scan'
    args: ['scan', '--src=.', '--report-path=security-report.json']
    waitFor: ['Clone repository']

  # Run tests
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run backend tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd BrasserieBot/backend
        npm ci
        npm test
    waitFor: ['Clone repository']

  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run frontend tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd BrasserieBot/frontend
        npm ci
        npm test
    waitFor: ['Clone repository']

  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run AutoDev tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd BrasserieBot/autodev
        npm ci
        npm test
    waitFor: ['Clone repository']

  # Build and push backend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build backend image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)',
      '-t', 'gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:latest',
      './BrasserieBot/backend'
    ]
    waitFor: ['Run backend tests', 'Run security scan']

  # Build and push frontend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build frontend image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)',
      '-t', 'gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:latest',
      './BrasserieBot/frontend'
    ]
    waitFor: ['Run frontend tests', 'Run security scan']

  # Build and push AutoDev image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build AutoDev image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)',
      '-t', 'gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:latest',
      './BrasserieBot/autodev'
    ]
    waitFor: ['Run AutoDev tests', 'Run security scan']

  # Build and push AutoDev Dashboard image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build AutoDev Dashboard image'
    args: [
      'build',
      '-f', './BrasserieBot/autodev/Dockerfile.dashboard',
      '-t', 'gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)',
      '-t', 'gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:latest',
      './BrasserieBot/autodev'
    ]
    waitFor: ['Run AutoDev tests', 'Run security scan']

  # Push all images
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push backend image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)']
    waitFor: ['Build backend image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push backend latest image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:latest']
    waitFor: ['Build backend image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push frontend image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)']
    waitFor: ['Build frontend image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push frontend latest image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:latest']
    waitFor: ['Build frontend image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push AutoDev image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)']
    waitFor: ['Build AutoDev image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push AutoDev latest image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:latest']
    waitFor: ['Build AutoDev image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push AutoDev Dashboard image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)']
    waitFor: ['Build AutoDev Dashboard image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push AutoDev Dashboard latest image'
    args: ['push', 'gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:latest']
    waitFor: ['Build AutoDev Dashboard image']

  # Run database migrations
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run database migrations'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd BrasserieBot/database
        npm install -g prisma
        prisma migrate deploy
    env:
      - 'DATABASE_URL=${_DATABASE_URL}'
    secretEnv: ['_DATABASE_URL']
    waitFor: ['Push backend image', 'Push frontend image', 'Push AutoDev image', 'Push AutoDev Dashboard image']

  # Update Kubernetes manifests
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: 'Update Kubernetes manifests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd BrasserieBot/infrastructure/kubernetes
        # Replace PROJECT_ID placeholder with actual project ID
        find . -type f -name "*.yaml" -exec sed -i "s/PROJECT_ID/$PROJECT_ID/g" {} \;
        # Update image tags
        VERSION=$$(cat ../../build.env | grep VERSION | cut -d "=" -f 2)
        sed -i "s|gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:latest|gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:$$VERSION|g" deployments/backend-deployment.yaml
        sed -i "s|gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:latest|gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:$$VERSION|g" deployments/frontend-deployment.yaml
        sed -i "s|gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:latest|gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:$$VERSION|g" deployments/autodev-deployment.yaml
        sed -i "s|gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:latest|gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:$$VERSION|g" deployments/autodev-dashboard-deployment.yaml
    waitFor: ['Run database migrations']

  # Deploy to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy to GKE'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get GKE credentials
        gcloud container clusters get-credentials ${_GKE_CLUSTER} --zone ${_GKE_ZONE} --project $PROJECT_ID
        
        # Apply namespaces first
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/namespaces/namespaces.yaml
        
        # Apply service accounts and config
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/config/service-accounts.yaml
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/config/config-maps.yaml
        
        # Apply secrets (in production, these would be managed by Secret Manager)
        # kubectl apply -f BrasserieBot/infrastructure/kubernetes/config/secrets.yaml
        
        # Apply deployments
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/backend-deployment.yaml
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/frontend-deployment.yaml
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/autodev-deployment.yaml
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/deployments/autodev-dashboard-deployment.yaml
        
        # Apply ingress
        kubectl apply -f BrasserieBot/infrastructure/kubernetes/ingress/ingress.yaml
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/brasserie-bot-backend -n brasserie-bot
        kubectl rollout status deployment/brasserie-bot-frontend -n brasserie-bot
        kubectl rollout status deployment/brasserie-bot-autodev -n brasserie-bot-autodev
        kubectl rollout status deployment/brasserie-bot-autodev-dashboard -n brasserie-bot-autodev
    waitFor: ['Update Kubernetes manifests']

  # Notify AutoDev system
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Notify AutoDev system'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION=$$(cat build.env | grep VERSION | cut -d "=" -f 2)
        curl -X POST https://api.brasserie-bot.com/autodev/deployment-notification \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${_AUTODEV_API_KEY}" \
          -d '{
            "version": "'$$VERSION'",
            "environment": "${_ENVIRONMENT}",
            "status": "success",
            "timestamp": "'$$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
          }'
    secretEnv: ['_AUTODEV_API_KEY']
    waitFor: ['Deploy to GKE']

images:
  - 'gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)'
  - 'gcr.io/$PROJECT_ID/${_BACKEND_IMAGE}:latest'
  - 'gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)'
  - 'gcr.io/$PROJECT_ID/${_FRONTEND_IMAGE}:latest'
  - 'gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)'
  - 'gcr.io/$PROJECT_ID/${_AUTODEV_IMAGE}:latest'
  - 'gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:$$(cat build.env | grep VERSION | cut -d "=" -f 2)'
  - 'gcr.io/$PROJECT_ID/${_AUTODEV_DASHBOARD_IMAGE}:latest'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/database-url/versions/latest
      env: '_DATABASE_URL'
    - versionName: projects/$PROJECT_ID/secrets/autodev-api-key/versions/latest
      env: '_AUTODEV_API_KEY'