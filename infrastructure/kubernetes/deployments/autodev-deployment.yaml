# BrasserieBot GCP Infrastructure - AutoDev Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: brasserie-bot-autodev
  namespace: brasserie-bot-autodev
  labels:
    app: brasserie-bot
    component: autodev
spec:
  replicas: 2
  selector:
    matchLabels:
      app: brasserie-bot
      component: autodev
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: brasserie-bot
        component: autodev
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: brasserie-bot-autodev
      containers:
      - name: autodev
        image: gcr.io/PROJECT_ID/brasserie-bot-autodev:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
        - containerPort: 8080
          name: dashboard
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DASHBOARD_PORT
          value: "8080"
        - name: CLAUDE_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-credentials
              key: claude-api-key
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-credentials
              key: pinecone-api-key
        - name: PINECONE_ENVIRONMENT
          value: "gcp-starter"
        - name: PINECONE_INDEX
          value: "brasserie-bot-knowledge"
        - name: STORAGE_BUCKET
          value: "brasserie-bot-assets-prod-autodev"
        - name: PUBSUB_PROJECT_ID
          value: "PROJECT_ID"
        - name: PUBSUB_TOPIC
          value: "autodev-events"
        - name: PUBSUB_SUBSCRIPTION
          value: "autodev-events-processor-sub"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: KNOWLEDGE_BASE_PATH
          value: "/app/knowledge"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: knowledge-volume
          mountPath: /app/knowledge
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: autodev-config
      - name: knowledge-volume
        persistentVolumeClaim:
          claimName: autodev-knowledge-pvc
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - brasserie-bot
                - key: component
                  operator: In
                  values:
                  - autodev
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: brasserie-bot
            component: autodev
---
apiVersion: v1
kind: Service
metadata:
  name: brasserie-bot-autodev
  namespace: brasserie-bot-autodev
  labels:
    app: brasserie-bot
    component: autodev
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: http
    protocol: TCP
    name: http
  - port: 8080
    targetPort: dashboard
    protocol: TCP
    name: dashboard
  selector:
    app: brasserie-bot
    component: autodev
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: autodev-knowledge-pvc
  namespace: brasserie-bot-autodev
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: brasserie-bot-autodev
  namespace: brasserie-bot-autodev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: brasserie-bot-autodev
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: autodev-config
  namespace: brasserie-bot-autodev
data:
  knowledge-base.json: |
    {
      "version": "1.0",
      "sources": [
        {
          "name": "inventory_procurement",
          "path": "/app/knowledge/inventory_procurement",
          "type": "markdown"
        },
        {
          "name": "payment_processing",
          "path": "/app/knowledge/payment_processing",
          "type": "markdown"
        },
        {
          "name": "pos_integration",
          "path": "/app/knowledge/pos_integration",
          "type": "markdown"
        },
        {
          "name": "reservation_systems",
          "path": "/app/knowledge/reservation_systems",
          "type": "markdown"
        },
        {
          "name": "restaurant_management",
          "path": "/app/knowledge/restaurant_management",
          "type": "markdown"
        },
        {
          "name": "supplier_relations",
          "path": "/app/knowledge/supplier_relations",
          "type": "markdown"
        }
      ],
      "embeddings": {
        "provider": "pinecone",
        "dimensions": 1536,
        "model": "text-embedding-ada-002"
      }
    }